/*!
 * Private matchMaker
 *
 * Copyright 2018 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

 "use strict";

 var fluid = fluid || require("infusion"),
     gpii = fluid.registerNamespace("gpii");

 fluid.defaults("gpii.lifecycleManager.privateMatchMaker", {
     gradeNames: ["fluid.component", "gpii.flowManager.matchMaking"],
     // members: {
     //     privateMatchMakingPromise: "@expand:fluid.promise()"
     // },
     invokers: {
         doMatch: {
             funcName: "gpii.lifecycleManager.privateMatchMaker.doMatch",
             args: [
                 "{that}",
                 "{flowManager}.deviceReporterDataSource",
                 "{that}.options.rawPreferences"
                 // "{arguments}.0",  // gpiiKey
                 // "{arguments}.1"   // preferences
             ]
         }
     },
     events: {
         onSuccess: null,
         onError: null
     },
     listeners: {
         "onGpiiKey.getPreferences": "fluid.identity",
         "onCreate.doMatch": "{that}.doMatch",
         // "onMatchDone.debug": {
         //     listener: "fluid.log",
         //     args: ["=== privateMatchMaker onSuccess: ", "{arguments}.0"]
         // }
         // "onMatchDone.matchToSettings": {
         //     listener: "gpii.flowManager.cloudBased.matchToSettings",
         //     args: ["{arguments}.0", "{that}.events.onSuccess", "from privateMatchMaker"]
         // },
         // "onSuccess.resolvePromise": "@expand:that.privateMatchMakingPromise.resolve({arguments}.0)",
         // "onError.rejectPromise": "@expand:that.privateMatchMakingPromise.reject({arguments}.0)",
     }
 });

 gpii.lifecycleManager.privateMatchMaker.doMatch = function (that, deviceReporterDataSource, rawPreferences) {
     that.events.onGpiiKey.fire("qssSettings");

     var preferences = {};
     fluid.set(preferences, ["contexts", "gpii-default", "preferences"], rawPreferences);
     that.events.onPreferences.fire(preferences);

     var devicePromise = deviceReporterDataSource.get();
     devicePromise.then(function (deviceData) {
         fluid.log("Private Match Maker, matchMaking - received device data: ", deviceData);
         that.events.onDeviceContext.fire(deviceData);
     }, function (err) {
         fluid.log("Private Match Maker, matchMaking - error at receiving device data: " + err.message);
         that.events.onError.fire(err);
     });

     // return that.privateMatchMakingPromise;
 };
