/*
 * Transform Solution Versions
 *
 * Copyright 2020 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.solutionsRegistry");

gpii.solutionsRegistry.transformSolutionsBtwVersions = function (solutions, fromVersion, toVersion) {
    var transformedSolutions = fluid.copy(solutions);

    for (var i = fromVersion; i > toVersion; i--) {
        var transformFuncName = "gpii.solutionsRegistry.transform_" + i + "_" + (i - 1);
        transformedSolutions = fluid.invokeGlobalFunction(transformFuncName, [transformedSolutions]);
    }
    return transformedSolutions;
};

gpii.solutionsRegistry.transform_2_1 = function (solutions) {
    var solutionsTogo = fluid.copy(solutions);
    fluid.each(solutionsTogo, function (solutionDef, solutionKey) {
        fluid.each(fluid.get(solutionDef, "settingsHandlers"), function (settingsHandlerDef, settingsHandlerId) {
            var settingPath, settingName;
            fluid.each(fluid.get(settingsHandlerDef, "supportedSettings"), function (settingsDef, id) {
                settingName = id;
                settingPath = settingsDef.path;
            });
            if (settingPath) {
                delete solutionsTogo[solutionKey].settingsHandlers[settingsHandlerId].supportedSettings[settingName].path;
                fluid.set(solutionsTogo,
                    [solutionKey,
                    "settingsHandlers",
                    settingsHandlerId,
                    "capabilitiesTransformations",
                    settingName,
                    "path",
                    "literalValue"
                ], settingPath);
            }
        });
    });
    return solutionsTogo;
};

gpii.solutionsRegistry.transformSolutionsBtwVersions({}, 2, 1);
