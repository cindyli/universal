/*
 * Transform Solution Versions
 *
 * Copyright 2020 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.solutionsRegistry");

gpii.solutionsRegistry.supportedOS = ["win32", "linux", "darwin", "android", "web"];

/**
 * Transform solutions from a higher version to a lower version.
 *
 * @param {Object} solutions - Solutions to be transformed.
 * @param {Object} os - The os id.
 * @param {Integer} fromVersion - The Solution Registry version to be transformed from.
 * It should be higher than the toVersion
 * @param {Integer} toVersion - The Solution Registry version to be transformed to.
 * It should be lower than the toVersion
 * @return {Object} The transformed solutions. If fromVersion is lower or equal to the toVersion,
 * the original solutions will be returned.
 */
gpii.solutionsRegistry.transformSolutionsBtwVersions = function (solutions, os, fromVersion, toVersion) {
    var transformedSolutions = fluid.copy(solutions);
    fromVersion = parseInt(fromVersion);
    toVersion = parseInt(toVersion);

    if (fromVersion > toVersion && gpii.solutionsRegistry.supportedOS.includes(os)) {
        for (var i = fromVersion; i > toVersion; i--) {
            var transformFuncName = "gpii.solutionsRegistry.transform_" + os + "_" + i + "_" + (i - 1);
            transformedSolutions = fluid.invokeGlobalFunction(transformFuncName, [transformedSolutions]);
        }
    }
    return transformedSolutions;
};

/**
 * The function that transforms solutions from a version 2 to version 1. It converts the "path" value defined
 * in "supportedSettings" section to the corresponding "capabilitiesTransformations" section.
 *
 * @param {Object} solutions - Solutions to be transformed.
 * @return {Object} The transformed solutions.
 */
gpii.solutionsRegistry.transform_win32_2_1 = function (solutions) {
    var solutionsTogo = fluid.copy(solutions);
    fluid.each(solutionsTogo, function (solutionDef, solutionKey) {
        fluid.each(fluid.get(solutionDef, "settingsHandlers"), function (settingsHandlerDef, settingsHandlerId) {
            var supportedSettings = fluid.get(settingsHandlerDef, "supportedSettings");
            fluid.each(supportedSettings, function (settingDef, settingName) {
                if (settingDef.path) {
                    fluid.set(solutionsTogo,
                        [solutionKey,
                        "settingsHandlers",
                        settingsHandlerId,
                        "capabilitiesTransformations",
                        settingName,
                        "path",
                        "literalValue"
                    ], settingDef.path);
                    delete solutionsTogo[solutionKey].settingsHandlers[settingsHandlerId].supportedSettings[settingName].path;
                }
            });
        });
    });

    return solutionsTogo;
};
