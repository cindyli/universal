/* User listeners
 *
 * Copyright 2017 Raising the Floor - International
 * Copyright 2019 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion");

var gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.userListeners");

// The user listeners.
fluid.defaults("gpii.userListeners", {
    gradeNames: ["fluid.component", "fluid.contextAware"],
    contextAwareness: {
        platform: {
            checks: {
                windows: {
                    contextValue: "{gpii.contexts.windows}",
                    gradeNames: ["gpii.userListeners.windows"]
                }
            }
        }
    },
    components: {
        pcsc: {
            type: "gpii.userListeners.pcsc",
            options: {
                events: {
                    onListenersStart: "{userListeners}.events.onListenersStart",
                    onListenersStop: "{userListeners}.events.onListenersStop"
                }
            }
        },
        usb: {
            type: "gpii.userListeners.usb",
            options: {
                events: {
                    onListenersStart: "{userListeners}.events.onListenersStart",
                    onListenersStop: "{userListeners}.events.onListenersStop"
                }
            }
        }
    },
    events: {
        // The listeners are starting.
        "onListenersStart": null,
        // The listeners are stopping.
        "onListenersStop": null
    },
    listeners: {
        "onCreate.startListeners": "{that}.events.onListenersStart"
    }
});

// A user listener.
fluid.defaults("gpii.userListener", {
    gradeNames: ["fluid.component"],
    // Set to true to call proximityTriggered, otherwise login/logout.
    proximity: false,
    // GPII-3988: Indicates that the keyins by this listener are environmental logons (such as auto-logons)
    environmental: false,
    // GPII-3936: Indicates that the keyins by this listener will use the local client credential
    // Override to provide a custom clientCredential source. The lifecycleManager currently supports these
    // clientCredential types: "local", "secured".
    clientCredentialType: "local",
    // Override to provide the name of the listener.
    listenerName: "no-name",
    components: {
        lifecycleManager: {
            type: "gpii.lifecycleManager"
        }
    },
    events: {
        onListenersStart: null,
        onListenersStop: null,

        // A GPII key has arrived.
        "onGpiiKeyArrive": null,
        // A GPII key has removed.
        "onGpiiKeyRemove": null,
        // The listener has failed.
        "onFail": null
    },
    invokers: {
        // Start the listener, returning a Promise
        startListener: "fluid.notImplemented",
        // Stop the listener, returning a Promise
        stopListener: "fluid.notImplemented",
        // Parse a Buffer containing an NDEF message, returning a string.
        decodeNDEF: {
            funcName: "gpii.userListeners.decodeNDEF",
            args: [
                "{arguments}.0" // NDEF buffer
            ]
        },
        // The listener has failed, and should be restarted.
        failed: {
            funcName: "gpii.userListeners.failed",
            args: [
                "{that}",
                "{arguments}.0" // The error.
            ]
        }
    },
    members: {
        // Number of failures
        failCount: 0
    },
    listeners: {
        // Start/stop this listener
        "onListenersStart.startListener":  "{that}.startListener",
        "onListenersStop.stopListener": "{that}.stopListener",

        "onGpiiKeyArrive.callFlowManager": {
            funcName: "gpii.userListeners.gpiiKeyArrived",
            args: [
                "{that}",
                "{arguments}.1" // gpiiKey
            ]
        },
        "onGpiiKeyRemove.callFlowManager": {
            funcName: "gpii.userListeners.gpiiKeyRemoved",
            args: [
                "{that}",
                "{arguments}.1" // gpiiKey
            ]
        }
    },

    // Seconds (multiplied by failureCount) to wait before restarting.
    failDelay: 10
});

/**
 * Handles the onGpiiKeyArrive event.
 *
 * It calls the "login" action for non-proximity devices, otherwise "proximityTriggered".
 *
 * @param {Component} that - An instance of gpii.userListener.
 * @param {String} gpiiKey - The GPII key from the user listener.
 */
gpii.userListeners.gpiiKeyArrived = function (that, gpiiKey) {
    fluid.log(that.options.listenerName + " GPII key arrived: " + gpiiKey);
    var loginInfo = {
        isEnvironmentalLogin: that.options.environmental,
        clientCredentialType: that.options.clientCredentialType
    };
    if (that.options.environmental && that.options.proximity) {
        // proximity listeners are for momentary triggers, which isn't compatible with an environmental state.
        fluid.fail("A listener can not be both 'environmental' and 'proximity'");
    } else {
        that.lifecycleManager[that.options.proximity ? "performProximityTriggered" : "performLogin"](gpiiKey, loginInfo);
    }
};

/**
 * Handles the onGpiiKeyRemove event.
 *
 * It calls the "logout" action for non-proximity devices, otherwise it does nothing.
 *
 * @param {Component} that - An instance of gpii.userListener.
 * @param {String} gpiiKey - The GPII key from the user listener.
 */
gpii.userListeners.gpiiKeyRemoved = function (that, gpiiKey) {
    fluid.log(that.options.listenerName + " GPII key removed: " + gpiiKey);

    if (!that.options.proximity) {
        // Temporary workaround for GPII-3769
        setTimeout(function () {
            that.lifecycleManager.performLogout(gpiiKey);
        }, 0);
    }
};

/**
 * The listener has failed, and needs to be restarted. To avoid fast repeating failures, the restart will have a delay
 * which increases each time.
 *
 * @param {Component} that - An instance of gpii.userListener.
 * @param {Any} err - The error.
 */
gpii.userListeners.failed = function (that, err) {
    var delay = Math.min(that.failCount++, 10) * that.options.failDelay;

    fluid.log(fluid.logLevel.WARN,
        "Listener " + that.options.listenerName + " has failed. Restarting in " + delay + " seconds");

    that.events.onFail.fire(that, err);

    process.nextTick(function () {
        that.stopListener().then(function () {
            setTimeout(function () {
                fluid.log("Restarting " + that.options.listenerName + " listener");
                that.startListener();
            }, delay * 1000);
        });
    });
};
